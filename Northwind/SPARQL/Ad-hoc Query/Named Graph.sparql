# Copying triples from one graph to another
# http://vos.openlinksw.com/owiki/wiki/VOS/VirtTipsAndTricksSPARQL11Insert

INSERT DATA 
{ GRAPH <urn:sparql:tests:insert:informative3> {
  
    _:a  <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>  <http://xmlns.com/foaf/0.1/Person> . 
    _:a  <http://xmlns.com/foaf/0.1/name>                   "Alice" . 
    _:a  <http://xmlns.com/foaf/0.1/mbox>                   <mailto:alice@example.com> . 

    _:b  <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>  <http://xmlns.com/foaf/0.1/Person> . 
    _:b  <http://xmlns.com/foaf/0.1/name>  "Bob" . 
  }
}
 
 SELECT * FROM <urn:sparql:tests:insert:informative3> WHERE {?s ?p ?o}


# Copy triples from grahp 3 to 4
WITH <urn:sparql:tests:insert:informative4> # This syntax removes the need to specify the graph multiple times in insertes and deletes.
INSERT 
  { 
    # GRAPH <urn:sparql:tests:insert:informative4>
    #   {
        ?person  <http://xmlns.com/foaf/0.1/name>  ?name . 
        ?person  <http://xmlns.com/foaf/0.1/mbox>  ?email 
    #   }
  }
WHERE
  { 
    GRAPH  <urn:sparql:tests:insert:informative3>
      {
        ?person  <http://xmlns.com/foaf/0.1/name>  ?name . 
        OPTIONAL { ?person  <http://xmlns.com/foaf/0.1/mbox>  ?email } 
      } 
  }    


SELECT * FROM <urn:sparql:tests:insert:informative4> WHERE {?s ?p ?o}


#  A second insert of the same data doesn't produce duplicates
INSERT 
  { 
    GRAPH <urn:sparql:tests:insert:informative4>
      {
        ?person  <http://xmlns.com/foaf/0.1/name>  ?name . 
        ?person  <http://xmlns.com/foaf/0.1/mbox>  ?email 
      }
  }
WHERE
  { 
    GRAPH  <urn:sparql:tests:insert:informative3>
      {
        ?person  <http://xmlns.com/foaf/0.1/name>  ?name . 
        OPTIONAL { ?person  <http://xmlns.com/foaf/0.1/mbox>  ?email } 
      } 
  }   


# TODO!!!!
# https://www.w3.org/TR/sparql11-query/#neg-notexists-minus


# The FROM and FROM NAMED keywords allow a query to specify an RDF dataset by reference; 
# they indicate that the dataset should include graphs that are obtained from representations 
# of the resources identified by the given IRIs (i.e. the absolute form of the given IRI references). 
# The dataset resulting from a number of FROM and FROM NAMED clauses is:
# - a default graph consisting of the RDF merge of the graphs referred to in the FROM clauses, and
# - a set of (IRI, graph) pairs, one from each FROM NAMED clause.


PREFIX ns: <http://example.org/ns#>
INSERT DATA
{ GRAPH <http://example/bookStore10> { <http://example/book1>  ns:price  10 } }

PREFIX ns: <http://example.org/ns#>
INSERT DATA
{ GRAPH <http://example/bookStore20> { <http://example/book1>  ns:price  20 } }

PREFIX ns: <http://example.org/ns#>
INSERT DATA
{ GRAPH <http://example/bookStore20> { <http://example/book1>  ns:price  10 } }

PREFIX ns: <http://example.org/ns#>
INSERT DATA
{ GRAPH <http://example/bookStore30> { <http://example/book1>  ns:price  30 } }


# Merge all of them, duplicates are added.
SELECT *
FROM <http://example/bookStore10> 
FROM <http://example/bookStore20>
FROM <http://example/bookStore30>
WHERE {?s ?p ?o}


# Merge all of them, duplicates are added.
SELECT *
FROM NAMED <http://example/bookStore10> 
FROM NAMED <http://example/bookStore20>
FROM NAMED <http://example/bookStore30>
WHERE { GRAPH ?g {?s ?p ?o}} 
ORDER BY ?g ?o

# Default graph as merge of graphs referenced in FROM 
# Doesn't include the named graph
SELECT *
FROM <http://example/bookStore10> 
FROM <http://example/bookStore20>
FROM NAMED <http://example/bookStore30>
WHERE {?s ?p ?o}


# IRI and Graph pairs of graphs referenced in FROM NAMED
# Only includes the named graphs
SELECT *
FROM <http://example/bookStore10> 
FROM <http://example/bookStore20>
FROM NAMED <http://example/bookStore30>
WHERE { GRAPH ?g {?s ?p ?o}} 


# Join across Graphs
# Only returns the triples that match the patterns in both graphs
SELECT *
WHERE {
  GRAPH <http://example/bookStore10> {?s ?p ?o}
  GRAPH <http://example/bookStore20> {?s ?p ?o}
  # GRAPH <http://example/bookStore30> {?s ?p ?o}
}

PREFIX ns: <http://example.org/ns#>
INSERT DATA
{ GRAPH <http://example/bookStore30> { <http://example/book1>  ns:price  10 } }


# Returns the triple that matches the patterns of all 3 graphs.
SELECT *
WHERE {
  GRAPH <http://example/bookStore10> {?s ?p ?o}
  GRAPH <http://example/bookStore20> {?s ?p ?o}
  GRAPH <http://example/bookStore30> {?s ?p ?o}
}


PREFIX ns: <http://example.org/ns#>
INSERT DATA
{ GRAPH <http://example/bookStore30> { <http://example/book1>  ns:price  20 } }


# Union 1 and 2 and join on 3.
    SELECT DISTINCT *
    FROM <http://example/bookStore10> 
    FROM <http://example/bookStore20>
    FROM NAMED <http://example/bookStore30>
    WHERE {
      {?s ?p ?o} 
      {GRAPH ?g {?s ?p ?o}} 
    }
    ORDER BY ?g ?o


# DOESN'T WORK!!!!
SELECT DISTINCT *
FROM NAMED <http://example/bookStore10>
FROM NAMED <http://example/bookStore20>
WHERE {
    GRAPH ?g {
        {?s ?p ?o.} union {?s ?p ?o .}
    }
    GRAPH <http://example/bookStore30> {?s ?p ?o .} 
}
ORDER BY ?o


# Counting triples in each graph
SELECT ?g (count(*) as ?size) 
#FROM NAMED stardog:context:all 
#FROM NAMED stardog:context:default
#FROM NAMED stardog:context:named 
#FROM NAMED stardog:context:local 
FROM NAMED <http://example/bookStore10> 
FROM NAMED <http://example/bookStore20>
FROM NAMED <http://example/bookStore30>
WHERE { GRAPH ?g {?s ?p ?o}} 
GROUP BY ?g
ORDER BY desc(?size)


# CREATE an empty Graph
CREATE GRAPH :NewEmptyGraph


# Load data into a Graph
LOAD <https://github.com/mbarbieri77/EKG/blob/master/Northwind/SPARQL/SampleDatabase/dumpdataNTRIPLE7.nt>
INTO GRAPH :ntriple7


PREFIX dc: <http://purl.org/dc/elements/1.1/>
INSERT DATA
{ 
  <http://example/book1> dc:title "A new book" ;
                         dc:creator "A.N.Other" .
}

PREFIX dc: <http://purl.org/dc/elements/1.1/>
SELECT * {{?s dc:title ?o} UNION {?s dc:creator ?o }}

PREFIX dc: <http://purl.org/dc/elements/1.1/>
DELETE DATA
{
  <http://example/book1> dc:title "A new book" ;
                         dc:creator "A.N.Other" .
}

PREFIX dc: <http://purl.org/dc/elements/1.1/>
PREFIX ns: <http://example.org/ns#>
INSERT DATA
{ GRAPH <http://example/bookStore> { <http://example/book1>  ns:price  42 } }


SELECT * 
FROM <http://example/bookStore>
WHERE {?s ?p ?o}

# The COPY operation is a shortcut for inserting all data from an input graph into a destination graph. 
# Data from the input graph is not affected, but data from the destination graph, if any, is removed before insertion.
COPY <http://example/bookStore> TO <http://example/bookStore2>

SELECT * 
FROM <http://example/bookStore2>
WHERE {?s ?p ?o}

# The MOVE operation is a shortcut for moving all data from an input graph into a destination graph. 
# The input graph is removed after insertion and data from the destination graph, if any, is removed before insertion.
MOVE <http://example/bookStore> TO <http://example/bookStore2>

SELECT * 
FROM NAMED <http://example/bookStore>
FROM NAMED <http://example/bookStore2>
WHERE {GRAPH ?g {?s ?p ?o}}

SELECT * 
FROM <http://example/bookStore>
FROM <http://example/bookStore2>
WHERE {?s ?p ?o}

CLEAR GRAPH <http://example/bookStore> 
CLEAR GRAPH <http://example/bookStore2> 

PREFIX dc: <http://purl.org/dc/elements/1.1/>
PREFIX ns: <http://example.org/ns#>
INSERT DATA
{ GRAPH <http://example/bookStore> { <http://example/book2>  ns:price  50 } }

PREFIX dc: <http://purl.org/dc/elements/1.1/>
PREFIX ns: <http://example.org/ns#>
INSERT DATA
{ GRAPH <http://example/bookStore2> { <http://example/book2>  ns:price  80 } }

SELECT * 
FROM NAMED <http://example/bookStore>
FROM NAMED <http://example/bookStore2>
WHERE {GRAPH ?g {?s ?p ?o}}

# The ADD operation is a shortcut for inserting all data from an input graph into a destination graph. 
# Data from the input graph is not affected, and initial data from the destination graph, if any, is kept intact.
# However, duplicates are not inserted. Run the ADD below twice to verify.
ADD <http://example/bookStore> TO <http://example/bookStore2>

SELECT * 
FROM NAMED <http://example/bookStore>
FROM NAMED <http://example/bookStore2>
WHERE {GRAPH ?g {?s ?p ?o}}
